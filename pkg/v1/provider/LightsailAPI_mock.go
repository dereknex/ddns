package provider

import context "context"
import lightsail "github.com/aws/aws-sdk-go/service/lightsail"

import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// LightsailAPI is an autogenerated mock type for the LightsailAPI type
type LightsailAPI struct {
	mock.Mock
}

// AllocateStaticIp provides a mock function with given fields: _a0
func (_m *LightsailAPI) AllocateStaticIp(_a0 *lightsail.AllocateStaticIpInput) (*lightsail.AllocateStaticIpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.AllocateStaticIpOutput
	if rf, ok := ret.Get(0).(func(*lightsail.AllocateStaticIpInput) *lightsail.AllocateStaticIpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AllocateStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.AllocateStaticIpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateStaticIpRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) AllocateStaticIpRequest(_a0 *lightsail.AllocateStaticIpInput) (*request.Request, *lightsail.AllocateStaticIpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.AllocateStaticIpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.AllocateStaticIpOutput
	if rf, ok := ret.Get(1).(func(*lightsail.AllocateStaticIpInput) *lightsail.AllocateStaticIpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.AllocateStaticIpOutput)
		}
	}

	return r0, r1
}

// AllocateStaticIpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) AllocateStaticIpWithContext(_a0 context.Context, _a1 *lightsail.AllocateStaticIpInput, _a2 ...request.Option) (*lightsail.AllocateStaticIpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.AllocateStaticIpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AllocateStaticIpInput, ...request.Option) *lightsail.AllocateStaticIpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AllocateStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AllocateStaticIpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachDisk provides a mock function with given fields: _a0
func (_m *LightsailAPI) AttachDisk(_a0 *lightsail.AttachDiskInput) (*lightsail.AttachDiskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.AttachDiskOutput
	if rf, ok := ret.Get(0).(func(*lightsail.AttachDiskInput) *lightsail.AttachDiskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.AttachDiskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachDiskRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) AttachDiskRequest(_a0 *lightsail.AttachDiskInput) (*request.Request, *lightsail.AttachDiskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.AttachDiskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.AttachDiskOutput
	if rf, ok := ret.Get(1).(func(*lightsail.AttachDiskInput) *lightsail.AttachDiskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.AttachDiskOutput)
		}
	}

	return r0, r1
}

// AttachDiskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) AttachDiskWithContext(_a0 context.Context, _a1 *lightsail.AttachDiskInput, _a2 ...request.Option) (*lightsail.AttachDiskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.AttachDiskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachDiskInput, ...request.Option) *lightsail.AttachDiskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachDiskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstancesToLoadBalancer provides a mock function with given fields: _a0
func (_m *LightsailAPI) AttachInstancesToLoadBalancer(_a0 *lightsail.AttachInstancesToLoadBalancerInput) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.AttachInstancesToLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(*lightsail.AttachInstancesToLoadBalancerInput) *lightsail.AttachInstancesToLoadBalancerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachInstancesToLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.AttachInstancesToLoadBalancerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstancesToLoadBalancerRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) AttachInstancesToLoadBalancerRequest(_a0 *lightsail.AttachInstancesToLoadBalancerInput) (*request.Request, *lightsail.AttachInstancesToLoadBalancerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.AttachInstancesToLoadBalancerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.AttachInstancesToLoadBalancerOutput
	if rf, ok := ret.Get(1).(func(*lightsail.AttachInstancesToLoadBalancerInput) *lightsail.AttachInstancesToLoadBalancerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.AttachInstancesToLoadBalancerOutput)
		}
	}

	return r0, r1
}

// AttachInstancesToLoadBalancerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) AttachInstancesToLoadBalancerWithContext(_a0 context.Context, _a1 *lightsail.AttachInstancesToLoadBalancerInput, _a2 ...request.Option) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.AttachInstancesToLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachInstancesToLoadBalancerInput, ...request.Option) *lightsail.AttachInstancesToLoadBalancerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachInstancesToLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachInstancesToLoadBalancerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachLoadBalancerTlsCertificate provides a mock function with given fields: _a0
func (_m *LightsailAPI) AttachLoadBalancerTlsCertificate(_a0 *lightsail.AttachLoadBalancerTlsCertificateInput) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.AttachLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(0).(func(*lightsail.AttachLoadBalancerTlsCertificateInput) *lightsail.AttachLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachLoadBalancerTlsCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.AttachLoadBalancerTlsCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachLoadBalancerTlsCertificateRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) AttachLoadBalancerTlsCertificateRequest(_a0 *lightsail.AttachLoadBalancerTlsCertificateInput) (*request.Request, *lightsail.AttachLoadBalancerTlsCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.AttachLoadBalancerTlsCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.AttachLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(1).(func(*lightsail.AttachLoadBalancerTlsCertificateInput) *lightsail.AttachLoadBalancerTlsCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.AttachLoadBalancerTlsCertificateOutput)
		}
	}

	return r0, r1
}

// AttachLoadBalancerTlsCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) AttachLoadBalancerTlsCertificateWithContext(_a0 context.Context, _a1 *lightsail.AttachLoadBalancerTlsCertificateInput, _a2 ...request.Option) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.AttachLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachLoadBalancerTlsCertificateInput, ...request.Option) *lightsail.AttachLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachLoadBalancerTlsCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachLoadBalancerTlsCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachStaticIp provides a mock function with given fields: _a0
func (_m *LightsailAPI) AttachStaticIp(_a0 *lightsail.AttachStaticIpInput) (*lightsail.AttachStaticIpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.AttachStaticIpOutput
	if rf, ok := ret.Get(0).(func(*lightsail.AttachStaticIpInput) *lightsail.AttachStaticIpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.AttachStaticIpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachStaticIpRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) AttachStaticIpRequest(_a0 *lightsail.AttachStaticIpInput) (*request.Request, *lightsail.AttachStaticIpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.AttachStaticIpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.AttachStaticIpOutput
	if rf, ok := ret.Get(1).(func(*lightsail.AttachStaticIpInput) *lightsail.AttachStaticIpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.AttachStaticIpOutput)
		}
	}

	return r0, r1
}

// AttachStaticIpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) AttachStaticIpWithContext(_a0 context.Context, _a1 *lightsail.AttachStaticIpInput, _a2 ...request.Option) (*lightsail.AttachStaticIpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.AttachStaticIpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachStaticIpInput, ...request.Option) *lightsail.AttachStaticIpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachStaticIpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseInstancePublicPorts provides a mock function with given fields: _a0
func (_m *LightsailAPI) CloseInstancePublicPorts(_a0 *lightsail.CloseInstancePublicPortsInput) (*lightsail.CloseInstancePublicPortsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CloseInstancePublicPortsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CloseInstancePublicPortsInput) *lightsail.CloseInstancePublicPortsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CloseInstancePublicPortsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CloseInstancePublicPortsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseInstancePublicPortsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CloseInstancePublicPortsRequest(_a0 *lightsail.CloseInstancePublicPortsInput) (*request.Request, *lightsail.CloseInstancePublicPortsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CloseInstancePublicPortsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CloseInstancePublicPortsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CloseInstancePublicPortsInput) *lightsail.CloseInstancePublicPortsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CloseInstancePublicPortsOutput)
		}
	}

	return r0, r1
}

// CloseInstancePublicPortsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CloseInstancePublicPortsWithContext(_a0 context.Context, _a1 *lightsail.CloseInstancePublicPortsInput, _a2 ...request.Option) (*lightsail.CloseInstancePublicPortsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CloseInstancePublicPortsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CloseInstancePublicPortsInput, ...request.Option) *lightsail.CloseInstancePublicPortsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CloseInstancePublicPortsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CloseInstancePublicPortsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopySnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) CopySnapshot(_a0 *lightsail.CopySnapshotInput) (*lightsail.CopySnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CopySnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CopySnapshotInput) *lightsail.CopySnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CopySnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CopySnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopySnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CopySnapshotRequest(_a0 *lightsail.CopySnapshotInput) (*request.Request, *lightsail.CopySnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CopySnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CopySnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CopySnapshotInput) *lightsail.CopySnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CopySnapshotOutput)
		}
	}

	return r0, r1
}

// CopySnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CopySnapshotWithContext(_a0 context.Context, _a1 *lightsail.CopySnapshotInput, _a2 ...request.Option) (*lightsail.CopySnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CopySnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CopySnapshotInput, ...request.Option) *lightsail.CopySnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CopySnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CopySnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudFormationStack provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateCloudFormationStack(_a0 *lightsail.CreateCloudFormationStackInput) (*lightsail.CreateCloudFormationStackOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateCloudFormationStackOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateCloudFormationStackInput) *lightsail.CreateCloudFormationStackOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateCloudFormationStackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateCloudFormationStackInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudFormationStackRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateCloudFormationStackRequest(_a0 *lightsail.CreateCloudFormationStackInput) (*request.Request, *lightsail.CreateCloudFormationStackOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateCloudFormationStackInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateCloudFormationStackOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateCloudFormationStackInput) *lightsail.CreateCloudFormationStackOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateCloudFormationStackOutput)
		}
	}

	return r0, r1
}

// CreateCloudFormationStackWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateCloudFormationStackWithContext(_a0 context.Context, _a1 *lightsail.CreateCloudFormationStackInput, _a2 ...request.Option) (*lightsail.CreateCloudFormationStackOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateCloudFormationStackOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateCloudFormationStackInput, ...request.Option) *lightsail.CreateCloudFormationStackOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateCloudFormationStackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateCloudFormationStackInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDisk provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDisk(_a0 *lightsail.CreateDiskInput) (*lightsail.CreateDiskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateDiskOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDiskInput) *lightsail.CreateDiskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDiskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDiskFromSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDiskFromSnapshot(_a0 *lightsail.CreateDiskFromSnapshotInput) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateDiskFromSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDiskFromSnapshotInput) *lightsail.CreateDiskFromSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskFromSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDiskFromSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDiskFromSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDiskFromSnapshotRequest(_a0 *lightsail.CreateDiskFromSnapshotInput) (*request.Request, *lightsail.CreateDiskFromSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDiskFromSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateDiskFromSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDiskFromSnapshotInput) *lightsail.CreateDiskFromSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateDiskFromSnapshotOutput)
		}
	}

	return r0, r1
}

// CreateDiskFromSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateDiskFromSnapshotWithContext(_a0 context.Context, _a1 *lightsail.CreateDiskFromSnapshotInput, _a2 ...request.Option) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateDiskFromSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskFromSnapshotInput, ...request.Option) *lightsail.CreateDiskFromSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskFromSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDiskFromSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDiskRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDiskRequest(_a0 *lightsail.CreateDiskInput) (*request.Request, *lightsail.CreateDiskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDiskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateDiskOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDiskInput) *lightsail.CreateDiskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateDiskOutput)
		}
	}

	return r0, r1
}

// CreateDiskSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDiskSnapshot(_a0 *lightsail.CreateDiskSnapshotInput) (*lightsail.CreateDiskSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateDiskSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDiskSnapshotInput) *lightsail.CreateDiskSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDiskSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDiskSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDiskSnapshotRequest(_a0 *lightsail.CreateDiskSnapshotInput) (*request.Request, *lightsail.CreateDiskSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDiskSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateDiskSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDiskSnapshotInput) *lightsail.CreateDiskSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateDiskSnapshotOutput)
		}
	}

	return r0, r1
}

// CreateDiskSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateDiskSnapshotWithContext(_a0 context.Context, _a1 *lightsail.CreateDiskSnapshotInput, _a2 ...request.Option) (*lightsail.CreateDiskSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateDiskSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskSnapshotInput, ...request.Option) *lightsail.CreateDiskSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDiskSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDiskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateDiskWithContext(_a0 context.Context, _a1 *lightsail.CreateDiskInput, _a2 ...request.Option) (*lightsail.CreateDiskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateDiskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskInput, ...request.Option) *lightsail.CreateDiskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDiskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDomain(_a0 *lightsail.CreateDomainInput) (*lightsail.CreateDomainOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateDomainOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDomainInput) *lightsail.CreateDomainOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDomainInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainEntry provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDomainEntry(_a0 *lightsail.CreateDomainEntryInput) (*lightsail.CreateDomainEntryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateDomainEntryOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDomainEntryInput) *lightsail.CreateDomainEntryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDomainEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDomainEntryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainEntryRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDomainEntryRequest(_a0 *lightsail.CreateDomainEntryInput) (*request.Request, *lightsail.CreateDomainEntryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDomainEntryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateDomainEntryOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDomainEntryInput) *lightsail.CreateDomainEntryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateDomainEntryOutput)
		}
	}

	return r0, r1
}

// CreateDomainEntryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateDomainEntryWithContext(_a0 context.Context, _a1 *lightsail.CreateDomainEntryInput, _a2 ...request.Option) (*lightsail.CreateDomainEntryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateDomainEntryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDomainEntryInput, ...request.Option) *lightsail.CreateDomainEntryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDomainEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDomainEntryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateDomainRequest(_a0 *lightsail.CreateDomainInput) (*request.Request, *lightsail.CreateDomainOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateDomainInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateDomainOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateDomainInput) *lightsail.CreateDomainOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateDomainOutput)
		}
	}

	return r0, r1
}

// CreateDomainWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateDomainWithContext(_a0 context.Context, _a1 *lightsail.CreateDomainInput, _a2 ...request.Option) (*lightsail.CreateDomainOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDomainInput, ...request.Option) *lightsail.CreateDomainOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDomainInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateInstanceSnapshot(_a0 *lightsail.CreateInstanceSnapshotInput) (*lightsail.CreateInstanceSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateInstanceSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateInstanceSnapshotInput) *lightsail.CreateInstanceSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstanceSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateInstanceSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateInstanceSnapshotRequest(_a0 *lightsail.CreateInstanceSnapshotInput) (*request.Request, *lightsail.CreateInstanceSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateInstanceSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateInstanceSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateInstanceSnapshotInput) *lightsail.CreateInstanceSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateInstanceSnapshotOutput)
		}
	}

	return r0, r1
}

// CreateInstanceSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateInstanceSnapshotWithContext(_a0 context.Context, _a1 *lightsail.CreateInstanceSnapshotInput, _a2 ...request.Option) (*lightsail.CreateInstanceSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateInstanceSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstanceSnapshotInput, ...request.Option) *lightsail.CreateInstanceSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstanceSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateInstanceSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstances provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateInstances(_a0 *lightsail.CreateInstancesInput) (*lightsail.CreateInstancesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateInstancesOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateInstancesInput) *lightsail.CreateInstancesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateInstancesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstancesFromSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateInstancesFromSnapshot(_a0 *lightsail.CreateInstancesFromSnapshotInput) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateInstancesFromSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateInstancesFromSnapshotInput) *lightsail.CreateInstancesFromSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstancesFromSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateInstancesFromSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstancesFromSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateInstancesFromSnapshotRequest(_a0 *lightsail.CreateInstancesFromSnapshotInput) (*request.Request, *lightsail.CreateInstancesFromSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateInstancesFromSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateInstancesFromSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateInstancesFromSnapshotInput) *lightsail.CreateInstancesFromSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateInstancesFromSnapshotOutput)
		}
	}

	return r0, r1
}

// CreateInstancesFromSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateInstancesFromSnapshotWithContext(_a0 context.Context, _a1 *lightsail.CreateInstancesFromSnapshotInput, _a2 ...request.Option) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateInstancesFromSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstancesFromSnapshotInput, ...request.Option) *lightsail.CreateInstancesFromSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstancesFromSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateInstancesFromSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstancesRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateInstancesRequest(_a0 *lightsail.CreateInstancesInput) (*request.Request, *lightsail.CreateInstancesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateInstancesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateInstancesOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateInstancesInput) *lightsail.CreateInstancesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateInstancesOutput)
		}
	}

	return r0, r1
}

// CreateInstancesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateInstancesWithContext(_a0 context.Context, _a1 *lightsail.CreateInstancesInput, _a2 ...request.Option) (*lightsail.CreateInstancesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstancesInput, ...request.Option) *lightsail.CreateInstancesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateInstancesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyPair provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateKeyPair(_a0 *lightsail.CreateKeyPairInput) (*lightsail.CreateKeyPairOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateKeyPairOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateKeyPairInput) *lightsail.CreateKeyPairOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateKeyPairInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyPairRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateKeyPairRequest(_a0 *lightsail.CreateKeyPairInput) (*request.Request, *lightsail.CreateKeyPairOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateKeyPairInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateKeyPairOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateKeyPairInput) *lightsail.CreateKeyPairOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateKeyPairOutput)
		}
	}

	return r0, r1
}

// CreateKeyPairWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateKeyPairWithContext(_a0 context.Context, _a1 *lightsail.CreateKeyPairInput, _a2 ...request.Option) (*lightsail.CreateKeyPairOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateKeyPairOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateKeyPairInput, ...request.Option) *lightsail.CreateKeyPairOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateKeyPairInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancer provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateLoadBalancer(_a0 *lightsail.CreateLoadBalancerInput) (*lightsail.CreateLoadBalancerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateLoadBalancerInput) *lightsail.CreateLoadBalancerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateLoadBalancerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancerRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateLoadBalancerRequest(_a0 *lightsail.CreateLoadBalancerInput) (*request.Request, *lightsail.CreateLoadBalancerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateLoadBalancerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateLoadBalancerOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateLoadBalancerInput) *lightsail.CreateLoadBalancerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateLoadBalancerOutput)
		}
	}

	return r0, r1
}

// CreateLoadBalancerTlsCertificate provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateLoadBalancerTlsCertificate(_a0 *lightsail.CreateLoadBalancerTlsCertificateInput) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateLoadBalancerTlsCertificateInput) *lightsail.CreateLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateLoadBalancerTlsCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateLoadBalancerTlsCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancerTlsCertificateRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateLoadBalancerTlsCertificateRequest(_a0 *lightsail.CreateLoadBalancerTlsCertificateInput) (*request.Request, *lightsail.CreateLoadBalancerTlsCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateLoadBalancerTlsCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateLoadBalancerTlsCertificateInput) *lightsail.CreateLoadBalancerTlsCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateLoadBalancerTlsCertificateOutput)
		}
	}

	return r0, r1
}

// CreateLoadBalancerTlsCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateLoadBalancerTlsCertificateWithContext(_a0 context.Context, _a1 *lightsail.CreateLoadBalancerTlsCertificateInput, _a2 ...request.Option) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateLoadBalancerTlsCertificateInput, ...request.Option) *lightsail.CreateLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateLoadBalancerTlsCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateLoadBalancerTlsCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateLoadBalancerWithContext(_a0 context.Context, _a1 *lightsail.CreateLoadBalancerInput, _a2 ...request.Option) (*lightsail.CreateLoadBalancerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateLoadBalancerInput, ...request.Option) *lightsail.CreateLoadBalancerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateLoadBalancerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabase provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateRelationalDatabase(_a0 *lightsail.CreateRelationalDatabaseInput) (*lightsail.CreateRelationalDatabaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateRelationalDatabaseInput) *lightsail.CreateRelationalDatabaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateRelationalDatabaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabaseFromSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateRelationalDatabaseFromSnapshot(_a0 *lightsail.CreateRelationalDatabaseFromSnapshotInput) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateRelationalDatabaseFromSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateRelationalDatabaseFromSnapshotInput) *lightsail.CreateRelationalDatabaseFromSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseFromSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateRelationalDatabaseFromSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabaseFromSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateRelationalDatabaseFromSnapshotRequest(_a0 *lightsail.CreateRelationalDatabaseFromSnapshotInput) (*request.Request, *lightsail.CreateRelationalDatabaseFromSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateRelationalDatabaseFromSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateRelationalDatabaseFromSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateRelationalDatabaseFromSnapshotInput) *lightsail.CreateRelationalDatabaseFromSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateRelationalDatabaseFromSnapshotOutput)
		}
	}

	return r0, r1
}

// CreateRelationalDatabaseFromSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateRelationalDatabaseFromSnapshotWithContext(_a0 context.Context, _a1 *lightsail.CreateRelationalDatabaseFromSnapshotInput, _a2 ...request.Option) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateRelationalDatabaseFromSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseFromSnapshotInput, ...request.Option) *lightsail.CreateRelationalDatabaseFromSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseFromSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateRelationalDatabaseFromSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabaseRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateRelationalDatabaseRequest(_a0 *lightsail.CreateRelationalDatabaseInput) (*request.Request, *lightsail.CreateRelationalDatabaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateRelationalDatabaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateRelationalDatabaseOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateRelationalDatabaseInput) *lightsail.CreateRelationalDatabaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateRelationalDatabaseOutput)
		}
	}

	return r0, r1
}

// CreateRelationalDatabaseSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateRelationalDatabaseSnapshot(_a0 *lightsail.CreateRelationalDatabaseSnapshotInput) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.CreateRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.CreateRelationalDatabaseSnapshotInput) *lightsail.CreateRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.CreateRelationalDatabaseSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabaseSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) CreateRelationalDatabaseSnapshotRequest(_a0 *lightsail.CreateRelationalDatabaseSnapshotInput) (*request.Request, *lightsail.CreateRelationalDatabaseSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.CreateRelationalDatabaseSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.CreateRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.CreateRelationalDatabaseSnapshotInput) *lightsail.CreateRelationalDatabaseSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.CreateRelationalDatabaseSnapshotOutput)
		}
	}

	return r0, r1
}

// CreateRelationalDatabaseSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateRelationalDatabaseSnapshotWithContext(_a0 context.Context, _a1 *lightsail.CreateRelationalDatabaseSnapshotInput, _a2 ...request.Option) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseSnapshotInput, ...request.Option) *lightsail.CreateRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateRelationalDatabaseSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) CreateRelationalDatabaseWithContext(_a0 context.Context, _a1 *lightsail.CreateRelationalDatabaseInput, _a2 ...request.Option) (*lightsail.CreateRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.CreateRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseInput, ...request.Option) *lightsail.CreateRelationalDatabaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateRelationalDatabaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDisk provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteDisk(_a0 *lightsail.DeleteDiskInput) (*lightsail.DeleteDiskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteDiskOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteDiskInput) *lightsail.DeleteDiskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteDiskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiskRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteDiskRequest(_a0 *lightsail.DeleteDiskInput) (*request.Request, *lightsail.DeleteDiskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteDiskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteDiskOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteDiskInput) *lightsail.DeleteDiskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteDiskOutput)
		}
	}

	return r0, r1
}

// DeleteDiskSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteDiskSnapshot(_a0 *lightsail.DeleteDiskSnapshotInput) (*lightsail.DeleteDiskSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteDiskSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteDiskSnapshotInput) *lightsail.DeleteDiskSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDiskSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteDiskSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiskSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteDiskSnapshotRequest(_a0 *lightsail.DeleteDiskSnapshotInput) (*request.Request, *lightsail.DeleteDiskSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteDiskSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteDiskSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteDiskSnapshotInput) *lightsail.DeleteDiskSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteDiskSnapshotOutput)
		}
	}

	return r0, r1
}

// DeleteDiskSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteDiskSnapshotWithContext(_a0 context.Context, _a1 *lightsail.DeleteDiskSnapshotInput, _a2 ...request.Option) (*lightsail.DeleteDiskSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteDiskSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDiskSnapshotInput, ...request.Option) *lightsail.DeleteDiskSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDiskSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDiskSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteDiskWithContext(_a0 context.Context, _a1 *lightsail.DeleteDiskInput, _a2 ...request.Option) (*lightsail.DeleteDiskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteDiskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDiskInput, ...request.Option) *lightsail.DeleteDiskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDiskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteDomain(_a0 *lightsail.DeleteDomainInput) (*lightsail.DeleteDomainOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteDomainOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteDomainInput) *lightsail.DeleteDomainOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteDomainInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainEntry provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteDomainEntry(_a0 *lightsail.DeleteDomainEntryInput) (*lightsail.DeleteDomainEntryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteDomainEntryOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteDomainEntryInput) *lightsail.DeleteDomainEntryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDomainEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteDomainEntryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainEntryRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteDomainEntryRequest(_a0 *lightsail.DeleteDomainEntryInput) (*request.Request, *lightsail.DeleteDomainEntryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteDomainEntryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteDomainEntryOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteDomainEntryInput) *lightsail.DeleteDomainEntryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteDomainEntryOutput)
		}
	}

	return r0, r1
}

// DeleteDomainEntryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteDomainEntryWithContext(_a0 context.Context, _a1 *lightsail.DeleteDomainEntryInput, _a2 ...request.Option) (*lightsail.DeleteDomainEntryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteDomainEntryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDomainEntryInput, ...request.Option) *lightsail.DeleteDomainEntryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDomainEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDomainEntryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteDomainRequest(_a0 *lightsail.DeleteDomainInput) (*request.Request, *lightsail.DeleteDomainOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteDomainInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteDomainOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteDomainInput) *lightsail.DeleteDomainOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteDomainOutput)
		}
	}

	return r0, r1
}

// DeleteDomainWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteDomainWithContext(_a0 context.Context, _a1 *lightsail.DeleteDomainInput, _a2 ...request.Option) (*lightsail.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDomainInput, ...request.Option) *lightsail.DeleteDomainOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDomainInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstance provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteInstance(_a0 *lightsail.DeleteInstanceInput) (*lightsail.DeleteInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteInstanceOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteInstanceInput) *lightsail.DeleteInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteInstanceRequest(_a0 *lightsail.DeleteInstanceInput) (*request.Request, *lightsail.DeleteInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteInstanceOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteInstanceInput) *lightsail.DeleteInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteInstanceOutput)
		}
	}

	return r0, r1
}

// DeleteInstanceSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteInstanceSnapshot(_a0 *lightsail.DeleteInstanceSnapshotInput) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteInstanceSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteInstanceSnapshotInput) *lightsail.DeleteInstanceSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteInstanceSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteInstanceSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteInstanceSnapshotRequest(_a0 *lightsail.DeleteInstanceSnapshotInput) (*request.Request, *lightsail.DeleteInstanceSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteInstanceSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteInstanceSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteInstanceSnapshotInput) *lightsail.DeleteInstanceSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteInstanceSnapshotOutput)
		}
	}

	return r0, r1
}

// DeleteInstanceSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteInstanceSnapshotWithContext(_a0 context.Context, _a1 *lightsail.DeleteInstanceSnapshotInput, _a2 ...request.Option) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteInstanceSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteInstanceSnapshotInput, ...request.Option) *lightsail.DeleteInstanceSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteInstanceSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteInstanceSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteInstanceWithContext(_a0 context.Context, _a1 *lightsail.DeleteInstanceInput, _a2 ...request.Option) (*lightsail.DeleteInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteInstanceInput, ...request.Option) *lightsail.DeleteInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyPair provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteKeyPair(_a0 *lightsail.DeleteKeyPairInput) (*lightsail.DeleteKeyPairOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteKeyPairOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteKeyPairInput) *lightsail.DeleteKeyPairOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteKeyPairInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyPairRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteKeyPairRequest(_a0 *lightsail.DeleteKeyPairInput) (*request.Request, *lightsail.DeleteKeyPairOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteKeyPairInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteKeyPairOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteKeyPairInput) *lightsail.DeleteKeyPairOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteKeyPairOutput)
		}
	}

	return r0, r1
}

// DeleteKeyPairWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteKeyPairWithContext(_a0 context.Context, _a1 *lightsail.DeleteKeyPairInput, _a2 ...request.Option) (*lightsail.DeleteKeyPairOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteKeyPairOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteKeyPairInput, ...request.Option) *lightsail.DeleteKeyPairOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteKeyPairInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKnownHostKeys provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteKnownHostKeys(_a0 *lightsail.DeleteKnownHostKeysInput) (*lightsail.DeleteKnownHostKeysOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteKnownHostKeysOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteKnownHostKeysInput) *lightsail.DeleteKnownHostKeysOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteKnownHostKeysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteKnownHostKeysInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKnownHostKeysRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteKnownHostKeysRequest(_a0 *lightsail.DeleteKnownHostKeysInput) (*request.Request, *lightsail.DeleteKnownHostKeysOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteKnownHostKeysInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteKnownHostKeysOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteKnownHostKeysInput) *lightsail.DeleteKnownHostKeysOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteKnownHostKeysOutput)
		}
	}

	return r0, r1
}

// DeleteKnownHostKeysWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteKnownHostKeysWithContext(_a0 context.Context, _a1 *lightsail.DeleteKnownHostKeysInput, _a2 ...request.Option) (*lightsail.DeleteKnownHostKeysOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteKnownHostKeysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteKnownHostKeysInput, ...request.Option) *lightsail.DeleteKnownHostKeysOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteKnownHostKeysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteKnownHostKeysInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancer provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteLoadBalancer(_a0 *lightsail.DeleteLoadBalancerInput) (*lightsail.DeleteLoadBalancerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteLoadBalancerInput) *lightsail.DeleteLoadBalancerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteLoadBalancerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancerRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteLoadBalancerRequest(_a0 *lightsail.DeleteLoadBalancerInput) (*request.Request, *lightsail.DeleteLoadBalancerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteLoadBalancerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteLoadBalancerOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteLoadBalancerInput) *lightsail.DeleteLoadBalancerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteLoadBalancerOutput)
		}
	}

	return r0, r1
}

// DeleteLoadBalancerTlsCertificate provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteLoadBalancerTlsCertificate(_a0 *lightsail.DeleteLoadBalancerTlsCertificateInput) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteLoadBalancerTlsCertificateInput) *lightsail.DeleteLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteLoadBalancerTlsCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancerTlsCertificateRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteLoadBalancerTlsCertificateRequest(_a0 *lightsail.DeleteLoadBalancerTlsCertificateInput) (*request.Request, *lightsail.DeleteLoadBalancerTlsCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteLoadBalancerTlsCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteLoadBalancerTlsCertificateInput) *lightsail.DeleteLoadBalancerTlsCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
		}
	}

	return r0, r1
}

// DeleteLoadBalancerTlsCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteLoadBalancerTlsCertificateWithContext(_a0 context.Context, _a1 *lightsail.DeleteLoadBalancerTlsCertificateInput, _a2 ...request.Option) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteLoadBalancerTlsCertificateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteLoadBalancerTlsCertificateInput, ...request.Option) *lightsail.DeleteLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteLoadBalancerTlsCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteLoadBalancerWithContext(_a0 context.Context, _a1 *lightsail.DeleteLoadBalancerInput, _a2 ...request.Option) (*lightsail.DeleteLoadBalancerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteLoadBalancerInput, ...request.Option) *lightsail.DeleteLoadBalancerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteLoadBalancerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelationalDatabase provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteRelationalDatabase(_a0 *lightsail.DeleteRelationalDatabaseInput) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteRelationalDatabaseInput) *lightsail.DeleteRelationalDatabaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteRelationalDatabaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelationalDatabaseRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteRelationalDatabaseRequest(_a0 *lightsail.DeleteRelationalDatabaseInput) (*request.Request, *lightsail.DeleteRelationalDatabaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteRelationalDatabaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteRelationalDatabaseOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteRelationalDatabaseInput) *lightsail.DeleteRelationalDatabaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteRelationalDatabaseOutput)
		}
	}

	return r0, r1
}

// DeleteRelationalDatabaseSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteRelationalDatabaseSnapshot(_a0 *lightsail.DeleteRelationalDatabaseSnapshotInput) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DeleteRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteRelationalDatabaseSnapshotInput) *lightsail.DeleteRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteRelationalDatabaseSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteRelationalDatabaseSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelationalDatabaseSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DeleteRelationalDatabaseSnapshotRequest(_a0 *lightsail.DeleteRelationalDatabaseSnapshotInput) (*request.Request, *lightsail.DeleteRelationalDatabaseSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DeleteRelationalDatabaseSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DeleteRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DeleteRelationalDatabaseSnapshotInput) *lightsail.DeleteRelationalDatabaseSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DeleteRelationalDatabaseSnapshotOutput)
		}
	}

	return r0, r1
}

// DeleteRelationalDatabaseSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteRelationalDatabaseSnapshotWithContext(_a0 context.Context, _a1 *lightsail.DeleteRelationalDatabaseSnapshotInput, _a2 ...request.Option) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteRelationalDatabaseSnapshotInput, ...request.Option) *lightsail.DeleteRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteRelationalDatabaseSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteRelationalDatabaseSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelationalDatabaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DeleteRelationalDatabaseWithContext(_a0 context.Context, _a1 *lightsail.DeleteRelationalDatabaseInput, _a2 ...request.Option) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DeleteRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteRelationalDatabaseInput, ...request.Option) *lightsail.DeleteRelationalDatabaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteRelationalDatabaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachDisk provides a mock function with given fields: _a0
func (_m *LightsailAPI) DetachDisk(_a0 *lightsail.DetachDiskInput) (*lightsail.DetachDiskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DetachDiskOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DetachDiskInput) *lightsail.DetachDiskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DetachDiskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachDiskRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DetachDiskRequest(_a0 *lightsail.DetachDiskInput) (*request.Request, *lightsail.DetachDiskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DetachDiskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DetachDiskOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DetachDiskInput) *lightsail.DetachDiskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DetachDiskOutput)
		}
	}

	return r0, r1
}

// DetachDiskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DetachDiskWithContext(_a0 context.Context, _a1 *lightsail.DetachDiskInput, _a2 ...request.Option) (*lightsail.DetachDiskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DetachDiskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachDiskInput, ...request.Option) *lightsail.DetachDiskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DetachDiskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstancesFromLoadBalancer provides a mock function with given fields: _a0
func (_m *LightsailAPI) DetachInstancesFromLoadBalancer(_a0 *lightsail.DetachInstancesFromLoadBalancerInput) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DetachInstancesFromLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DetachInstancesFromLoadBalancerInput) *lightsail.DetachInstancesFromLoadBalancerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachInstancesFromLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DetachInstancesFromLoadBalancerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstancesFromLoadBalancerRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DetachInstancesFromLoadBalancerRequest(_a0 *lightsail.DetachInstancesFromLoadBalancerInput) (*request.Request, *lightsail.DetachInstancesFromLoadBalancerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DetachInstancesFromLoadBalancerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DetachInstancesFromLoadBalancerOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DetachInstancesFromLoadBalancerInput) *lightsail.DetachInstancesFromLoadBalancerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DetachInstancesFromLoadBalancerOutput)
		}
	}

	return r0, r1
}

// DetachInstancesFromLoadBalancerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DetachInstancesFromLoadBalancerWithContext(_a0 context.Context, _a1 *lightsail.DetachInstancesFromLoadBalancerInput, _a2 ...request.Option) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DetachInstancesFromLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachInstancesFromLoadBalancerInput, ...request.Option) *lightsail.DetachInstancesFromLoadBalancerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachInstancesFromLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DetachInstancesFromLoadBalancerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachStaticIp provides a mock function with given fields: _a0
func (_m *LightsailAPI) DetachStaticIp(_a0 *lightsail.DetachStaticIpInput) (*lightsail.DetachStaticIpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DetachStaticIpOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DetachStaticIpInput) *lightsail.DetachStaticIpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DetachStaticIpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachStaticIpRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DetachStaticIpRequest(_a0 *lightsail.DetachStaticIpInput) (*request.Request, *lightsail.DetachStaticIpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DetachStaticIpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DetachStaticIpOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DetachStaticIpInput) *lightsail.DetachStaticIpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DetachStaticIpOutput)
		}
	}

	return r0, r1
}

// DetachStaticIpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DetachStaticIpWithContext(_a0 context.Context, _a1 *lightsail.DetachStaticIpInput, _a2 ...request.Option) (*lightsail.DetachStaticIpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DetachStaticIpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachStaticIpInput, ...request.Option) *lightsail.DetachStaticIpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DetachStaticIpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadDefaultKeyPair provides a mock function with given fields: _a0
func (_m *LightsailAPI) DownloadDefaultKeyPair(_a0 *lightsail.DownloadDefaultKeyPairInput) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.DownloadDefaultKeyPairOutput
	if rf, ok := ret.Get(0).(func(*lightsail.DownloadDefaultKeyPairInput) *lightsail.DownloadDefaultKeyPairOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DownloadDefaultKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.DownloadDefaultKeyPairInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadDefaultKeyPairRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) DownloadDefaultKeyPairRequest(_a0 *lightsail.DownloadDefaultKeyPairInput) (*request.Request, *lightsail.DownloadDefaultKeyPairOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.DownloadDefaultKeyPairInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.DownloadDefaultKeyPairOutput
	if rf, ok := ret.Get(1).(func(*lightsail.DownloadDefaultKeyPairInput) *lightsail.DownloadDefaultKeyPairOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.DownloadDefaultKeyPairOutput)
		}
	}

	return r0, r1
}

// DownloadDefaultKeyPairWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) DownloadDefaultKeyPairWithContext(_a0 context.Context, _a1 *lightsail.DownloadDefaultKeyPairInput, _a2 ...request.Option) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.DownloadDefaultKeyPairOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DownloadDefaultKeyPairInput, ...request.Option) *lightsail.DownloadDefaultKeyPairOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DownloadDefaultKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DownloadDefaultKeyPairInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) ExportSnapshot(_a0 *lightsail.ExportSnapshotInput) (*lightsail.ExportSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.ExportSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.ExportSnapshotInput) *lightsail.ExportSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ExportSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.ExportSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) ExportSnapshotRequest(_a0 *lightsail.ExportSnapshotInput) (*request.Request, *lightsail.ExportSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.ExportSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.ExportSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.ExportSnapshotInput) *lightsail.ExportSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.ExportSnapshotOutput)
		}
	}

	return r0, r1
}

// ExportSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) ExportSnapshotWithContext(_a0 context.Context, _a1 *lightsail.ExportSnapshotInput, _a2 ...request.Option) (*lightsail.ExportSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.ExportSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ExportSnapshotInput, ...request.Option) *lightsail.ExportSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ExportSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.ExportSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveNames provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetActiveNames(_a0 *lightsail.GetActiveNamesInput) (*lightsail.GetActiveNamesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetActiveNamesOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetActiveNamesInput) *lightsail.GetActiveNamesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetActiveNamesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetActiveNamesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveNamesRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetActiveNamesRequest(_a0 *lightsail.GetActiveNamesInput) (*request.Request, *lightsail.GetActiveNamesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetActiveNamesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetActiveNamesOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetActiveNamesInput) *lightsail.GetActiveNamesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetActiveNamesOutput)
		}
	}

	return r0, r1
}

// GetActiveNamesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetActiveNamesWithContext(_a0 context.Context, _a1 *lightsail.GetActiveNamesInput, _a2 ...request.Option) (*lightsail.GetActiveNamesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetActiveNamesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetActiveNamesInput, ...request.Option) *lightsail.GetActiveNamesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetActiveNamesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetActiveNamesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlueprints provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetBlueprints(_a0 *lightsail.GetBlueprintsInput) (*lightsail.GetBlueprintsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetBlueprintsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetBlueprintsInput) *lightsail.GetBlueprintsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBlueprintsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetBlueprintsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlueprintsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetBlueprintsRequest(_a0 *lightsail.GetBlueprintsInput) (*request.Request, *lightsail.GetBlueprintsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetBlueprintsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetBlueprintsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetBlueprintsInput) *lightsail.GetBlueprintsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetBlueprintsOutput)
		}
	}

	return r0, r1
}

// GetBlueprintsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetBlueprintsWithContext(_a0 context.Context, _a1 *lightsail.GetBlueprintsInput, _a2 ...request.Option) (*lightsail.GetBlueprintsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetBlueprintsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBlueprintsInput, ...request.Option) *lightsail.GetBlueprintsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBlueprintsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetBlueprintsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBundles provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetBundles(_a0 *lightsail.GetBundlesInput) (*lightsail.GetBundlesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetBundlesOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetBundlesInput) *lightsail.GetBundlesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBundlesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetBundlesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBundlesRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetBundlesRequest(_a0 *lightsail.GetBundlesInput) (*request.Request, *lightsail.GetBundlesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetBundlesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetBundlesOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetBundlesInput) *lightsail.GetBundlesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetBundlesOutput)
		}
	}

	return r0, r1
}

// GetBundlesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetBundlesWithContext(_a0 context.Context, _a1 *lightsail.GetBundlesInput, _a2 ...request.Option) (*lightsail.GetBundlesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetBundlesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBundlesInput, ...request.Option) *lightsail.GetBundlesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBundlesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetBundlesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudFormationStackRecords provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetCloudFormationStackRecords(_a0 *lightsail.GetCloudFormationStackRecordsInput) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetCloudFormationStackRecordsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetCloudFormationStackRecordsInput) *lightsail.GetCloudFormationStackRecordsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetCloudFormationStackRecordsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetCloudFormationStackRecordsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudFormationStackRecordsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetCloudFormationStackRecordsRequest(_a0 *lightsail.GetCloudFormationStackRecordsInput) (*request.Request, *lightsail.GetCloudFormationStackRecordsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetCloudFormationStackRecordsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetCloudFormationStackRecordsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetCloudFormationStackRecordsInput) *lightsail.GetCloudFormationStackRecordsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetCloudFormationStackRecordsOutput)
		}
	}

	return r0, r1
}

// GetCloudFormationStackRecordsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetCloudFormationStackRecordsWithContext(_a0 context.Context, _a1 *lightsail.GetCloudFormationStackRecordsInput, _a2 ...request.Option) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetCloudFormationStackRecordsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetCloudFormationStackRecordsInput, ...request.Option) *lightsail.GetCloudFormationStackRecordsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetCloudFormationStackRecordsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetCloudFormationStackRecordsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisk provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDisk(_a0 *lightsail.GetDiskInput) (*lightsail.GetDiskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetDiskOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetDiskInput) *lightsail.GetDiskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetDiskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiskRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDiskRequest(_a0 *lightsail.GetDiskInput) (*request.Request, *lightsail.GetDiskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetDiskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetDiskOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetDiskInput) *lightsail.GetDiskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetDiskOutput)
		}
	}

	return r0, r1
}

// GetDiskSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDiskSnapshot(_a0 *lightsail.GetDiskSnapshotInput) (*lightsail.GetDiskSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetDiskSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetDiskSnapshotInput) *lightsail.GetDiskSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetDiskSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiskSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDiskSnapshotRequest(_a0 *lightsail.GetDiskSnapshotInput) (*request.Request, *lightsail.GetDiskSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetDiskSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetDiskSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetDiskSnapshotInput) *lightsail.GetDiskSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetDiskSnapshotOutput)
		}
	}

	return r0, r1
}

// GetDiskSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetDiskSnapshotWithContext(_a0 context.Context, _a1 *lightsail.GetDiskSnapshotInput, _a2 ...request.Option) (*lightsail.GetDiskSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetDiskSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskSnapshotInput, ...request.Option) *lightsail.GetDiskSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDiskSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiskSnapshots provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDiskSnapshots(_a0 *lightsail.GetDiskSnapshotsInput) (*lightsail.GetDiskSnapshotsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetDiskSnapshotsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetDiskSnapshotsInput) *lightsail.GetDiskSnapshotsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetDiskSnapshotsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiskSnapshotsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDiskSnapshotsRequest(_a0 *lightsail.GetDiskSnapshotsInput) (*request.Request, *lightsail.GetDiskSnapshotsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetDiskSnapshotsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetDiskSnapshotsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetDiskSnapshotsInput) *lightsail.GetDiskSnapshotsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetDiskSnapshotsOutput)
		}
	}

	return r0, r1
}

// GetDiskSnapshotsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetDiskSnapshotsWithContext(_a0 context.Context, _a1 *lightsail.GetDiskSnapshotsInput, _a2 ...request.Option) (*lightsail.GetDiskSnapshotsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetDiskSnapshotsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskSnapshotsInput, ...request.Option) *lightsail.GetDiskSnapshotsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDiskSnapshotsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetDiskWithContext(_a0 context.Context, _a1 *lightsail.GetDiskInput, _a2 ...request.Option) (*lightsail.GetDiskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetDiskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskInput, ...request.Option) *lightsail.GetDiskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDiskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisks provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDisks(_a0 *lightsail.GetDisksInput) (*lightsail.GetDisksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetDisksOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetDisksInput) *lightsail.GetDisksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDisksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetDisksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisksRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDisksRequest(_a0 *lightsail.GetDisksInput) (*request.Request, *lightsail.GetDisksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetDisksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetDisksOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetDisksInput) *lightsail.GetDisksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetDisksOutput)
		}
	}

	return r0, r1
}

// GetDisksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetDisksWithContext(_a0 context.Context, _a1 *lightsail.GetDisksInput, _a2 ...request.Option) (*lightsail.GetDisksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetDisksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDisksInput, ...request.Option) *lightsail.GetDisksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDisksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDisksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomain provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDomain(_a0 *lightsail.GetDomainInput) (*lightsail.GetDomainOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetDomainOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetDomainInput) *lightsail.GetDomainOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetDomainInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDomainRequest(_a0 *lightsail.GetDomainInput) (*request.Request, *lightsail.GetDomainOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetDomainInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetDomainOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetDomainInput) *lightsail.GetDomainOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetDomainOutput)
		}
	}

	return r0, r1
}

// GetDomainWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetDomainWithContext(_a0 context.Context, _a1 *lightsail.GetDomainInput, _a2 ...request.Option) (*lightsail.GetDomainOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDomainInput, ...request.Option) *lightsail.GetDomainOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDomainInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomains provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDomains(_a0 *lightsail.GetDomainsInput) (*lightsail.GetDomainsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetDomainsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetDomainsInput) *lightsail.GetDomainsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDomainsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetDomainsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetDomainsRequest(_a0 *lightsail.GetDomainsInput) (*request.Request, *lightsail.GetDomainsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetDomainsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetDomainsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetDomainsInput) *lightsail.GetDomainsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetDomainsOutput)
		}
	}

	return r0, r1
}

// GetDomainsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetDomainsWithContext(_a0 context.Context, _a1 *lightsail.GetDomainsInput, _a2 ...request.Option) (*lightsail.GetDomainsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetDomainsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDomainsInput, ...request.Option) *lightsail.GetDomainsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDomainsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDomainsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExportSnapshotRecords provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetExportSnapshotRecords(_a0 *lightsail.GetExportSnapshotRecordsInput) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetExportSnapshotRecordsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetExportSnapshotRecordsInput) *lightsail.GetExportSnapshotRecordsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetExportSnapshotRecordsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetExportSnapshotRecordsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExportSnapshotRecordsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetExportSnapshotRecordsRequest(_a0 *lightsail.GetExportSnapshotRecordsInput) (*request.Request, *lightsail.GetExportSnapshotRecordsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetExportSnapshotRecordsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetExportSnapshotRecordsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetExportSnapshotRecordsInput) *lightsail.GetExportSnapshotRecordsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetExportSnapshotRecordsOutput)
		}
	}

	return r0, r1
}

// GetExportSnapshotRecordsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetExportSnapshotRecordsWithContext(_a0 context.Context, _a1 *lightsail.GetExportSnapshotRecordsInput, _a2 ...request.Option) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetExportSnapshotRecordsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetExportSnapshotRecordsInput, ...request.Option) *lightsail.GetExportSnapshotRecordsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetExportSnapshotRecordsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetExportSnapshotRecordsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstance(_a0 *lightsail.GetInstanceInput) (*lightsail.GetInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetInstanceOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceInput) *lightsail.GetInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceAccessDetails provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceAccessDetails(_a0 *lightsail.GetInstanceAccessDetailsInput) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetInstanceAccessDetailsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceAccessDetailsInput) *lightsail.GetInstanceAccessDetailsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceAccessDetailsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceAccessDetailsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceAccessDetailsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceAccessDetailsRequest(_a0 *lightsail.GetInstanceAccessDetailsInput) (*request.Request, *lightsail.GetInstanceAccessDetailsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceAccessDetailsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetInstanceAccessDetailsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceAccessDetailsInput) *lightsail.GetInstanceAccessDetailsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetInstanceAccessDetailsOutput)
		}
	}

	return r0, r1
}

// GetInstanceAccessDetailsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetInstanceAccessDetailsWithContext(_a0 context.Context, _a1 *lightsail.GetInstanceAccessDetailsInput, _a2 ...request.Option) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetInstanceAccessDetailsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceAccessDetailsInput, ...request.Option) *lightsail.GetInstanceAccessDetailsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceAccessDetailsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceAccessDetailsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceMetricData provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceMetricData(_a0 *lightsail.GetInstanceMetricDataInput) (*lightsail.GetInstanceMetricDataOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetInstanceMetricDataOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceMetricDataInput) *lightsail.GetInstanceMetricDataOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceMetricDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceMetricDataInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceMetricDataRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceMetricDataRequest(_a0 *lightsail.GetInstanceMetricDataInput) (*request.Request, *lightsail.GetInstanceMetricDataOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceMetricDataInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetInstanceMetricDataOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceMetricDataInput) *lightsail.GetInstanceMetricDataOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetInstanceMetricDataOutput)
		}
	}

	return r0, r1
}

// GetInstanceMetricDataWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetInstanceMetricDataWithContext(_a0 context.Context, _a1 *lightsail.GetInstanceMetricDataInput, _a2 ...request.Option) (*lightsail.GetInstanceMetricDataOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetInstanceMetricDataOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceMetricDataInput, ...request.Option) *lightsail.GetInstanceMetricDataOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceMetricDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceMetricDataInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancePortStates provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstancePortStates(_a0 *lightsail.GetInstancePortStatesInput) (*lightsail.GetInstancePortStatesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetInstancePortStatesOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstancePortStatesInput) *lightsail.GetInstancePortStatesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstancePortStatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstancePortStatesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancePortStatesRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstancePortStatesRequest(_a0 *lightsail.GetInstancePortStatesInput) (*request.Request, *lightsail.GetInstancePortStatesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstancePortStatesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetInstancePortStatesOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstancePortStatesInput) *lightsail.GetInstancePortStatesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetInstancePortStatesOutput)
		}
	}

	return r0, r1
}

// GetInstancePortStatesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetInstancePortStatesWithContext(_a0 context.Context, _a1 *lightsail.GetInstancePortStatesInput, _a2 ...request.Option) (*lightsail.GetInstancePortStatesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetInstancePortStatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstancePortStatesInput, ...request.Option) *lightsail.GetInstancePortStatesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstancePortStatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstancePortStatesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceRequest(_a0 *lightsail.GetInstanceInput) (*request.Request, *lightsail.GetInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetInstanceOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceInput) *lightsail.GetInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetInstanceOutput)
		}
	}

	return r0, r1
}

// GetInstanceSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceSnapshot(_a0 *lightsail.GetInstanceSnapshotInput) (*lightsail.GetInstanceSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetInstanceSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceSnapshotInput) *lightsail.GetInstanceSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceSnapshotRequest(_a0 *lightsail.GetInstanceSnapshotInput) (*request.Request, *lightsail.GetInstanceSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetInstanceSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceSnapshotInput) *lightsail.GetInstanceSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetInstanceSnapshotOutput)
		}
	}

	return r0, r1
}

// GetInstanceSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetInstanceSnapshotWithContext(_a0 context.Context, _a1 *lightsail.GetInstanceSnapshotInput, _a2 ...request.Option) (*lightsail.GetInstanceSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetInstanceSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceSnapshotInput, ...request.Option) *lightsail.GetInstanceSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceSnapshots provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceSnapshots(_a0 *lightsail.GetInstanceSnapshotsInput) (*lightsail.GetInstanceSnapshotsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetInstanceSnapshotsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceSnapshotsInput) *lightsail.GetInstanceSnapshotsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceSnapshotsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceSnapshotsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceSnapshotsRequest(_a0 *lightsail.GetInstanceSnapshotsInput) (*request.Request, *lightsail.GetInstanceSnapshotsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceSnapshotsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetInstanceSnapshotsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceSnapshotsInput) *lightsail.GetInstanceSnapshotsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetInstanceSnapshotsOutput)
		}
	}

	return r0, r1
}

// GetInstanceSnapshotsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetInstanceSnapshotsWithContext(_a0 context.Context, _a1 *lightsail.GetInstanceSnapshotsInput, _a2 ...request.Option) (*lightsail.GetInstanceSnapshotsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetInstanceSnapshotsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceSnapshotsInput, ...request.Option) *lightsail.GetInstanceSnapshotsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceSnapshotsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceState provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceState(_a0 *lightsail.GetInstanceStateInput) (*lightsail.GetInstanceStateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetInstanceStateOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceStateInput) *lightsail.GetInstanceStateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceStateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceStateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceStateRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstanceStateRequest(_a0 *lightsail.GetInstanceStateInput) (*request.Request, *lightsail.GetInstanceStateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstanceStateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetInstanceStateOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstanceStateInput) *lightsail.GetInstanceStateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetInstanceStateOutput)
		}
	}

	return r0, r1
}

// GetInstanceStateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetInstanceStateWithContext(_a0 context.Context, _a1 *lightsail.GetInstanceStateInput, _a2 ...request.Option) (*lightsail.GetInstanceStateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetInstanceStateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceStateInput, ...request.Option) *lightsail.GetInstanceStateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceStateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceStateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetInstanceWithContext(_a0 context.Context, _a1 *lightsail.GetInstanceInput, _a2 ...request.Option) (*lightsail.GetInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceInput, ...request.Option) *lightsail.GetInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstances provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstances(_a0 *lightsail.GetInstancesInput) (*lightsail.GetInstancesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetInstancesOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstancesInput) *lightsail.GetInstancesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstancesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetInstancesRequest(_a0 *lightsail.GetInstancesInput) (*request.Request, *lightsail.GetInstancesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetInstancesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetInstancesOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetInstancesInput) *lightsail.GetInstancesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetInstancesOutput)
		}
	}

	return r0, r1
}

// GetInstancesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetInstancesWithContext(_a0 context.Context, _a1 *lightsail.GetInstancesInput, _a2 ...request.Option) (*lightsail.GetInstancesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstancesInput, ...request.Option) *lightsail.GetInstancesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstancesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPair provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetKeyPair(_a0 *lightsail.GetKeyPairInput) (*lightsail.GetKeyPairOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetKeyPairOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetKeyPairInput) *lightsail.GetKeyPairOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetKeyPairInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPairRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetKeyPairRequest(_a0 *lightsail.GetKeyPairInput) (*request.Request, *lightsail.GetKeyPairOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetKeyPairInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetKeyPairOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetKeyPairInput) *lightsail.GetKeyPairOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetKeyPairOutput)
		}
	}

	return r0, r1
}

// GetKeyPairWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetKeyPairWithContext(_a0 context.Context, _a1 *lightsail.GetKeyPairInput, _a2 ...request.Option) (*lightsail.GetKeyPairOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetKeyPairOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetKeyPairInput, ...request.Option) *lightsail.GetKeyPairOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetKeyPairInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPairs provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetKeyPairs(_a0 *lightsail.GetKeyPairsInput) (*lightsail.GetKeyPairsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetKeyPairsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetKeyPairsInput) *lightsail.GetKeyPairsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetKeyPairsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetKeyPairsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPairsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetKeyPairsRequest(_a0 *lightsail.GetKeyPairsInput) (*request.Request, *lightsail.GetKeyPairsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetKeyPairsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetKeyPairsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetKeyPairsInput) *lightsail.GetKeyPairsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetKeyPairsOutput)
		}
	}

	return r0, r1
}

// GetKeyPairsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetKeyPairsWithContext(_a0 context.Context, _a1 *lightsail.GetKeyPairsInput, _a2 ...request.Option) (*lightsail.GetKeyPairsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetKeyPairsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetKeyPairsInput, ...request.Option) *lightsail.GetKeyPairsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetKeyPairsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetKeyPairsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancer provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetLoadBalancer(_a0 *lightsail.GetLoadBalancerInput) (*lightsail.GetLoadBalancerOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetLoadBalancerInput) *lightsail.GetLoadBalancerOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetLoadBalancerInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerMetricData provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetLoadBalancerMetricData(_a0 *lightsail.GetLoadBalancerMetricDataInput) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetLoadBalancerMetricDataOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetLoadBalancerMetricDataInput) *lightsail.GetLoadBalancerMetricDataOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerMetricDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetLoadBalancerMetricDataInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerMetricDataRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetLoadBalancerMetricDataRequest(_a0 *lightsail.GetLoadBalancerMetricDataInput) (*request.Request, *lightsail.GetLoadBalancerMetricDataOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetLoadBalancerMetricDataInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetLoadBalancerMetricDataOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetLoadBalancerMetricDataInput) *lightsail.GetLoadBalancerMetricDataOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetLoadBalancerMetricDataOutput)
		}
	}

	return r0, r1
}

// GetLoadBalancerMetricDataWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetLoadBalancerMetricDataWithContext(_a0 context.Context, _a1 *lightsail.GetLoadBalancerMetricDataInput, _a2 ...request.Option) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetLoadBalancerMetricDataOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerMetricDataInput, ...request.Option) *lightsail.GetLoadBalancerMetricDataOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerMetricDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancerMetricDataInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetLoadBalancerRequest(_a0 *lightsail.GetLoadBalancerInput) (*request.Request, *lightsail.GetLoadBalancerOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetLoadBalancerInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetLoadBalancerOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetLoadBalancerInput) *lightsail.GetLoadBalancerOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetLoadBalancerOutput)
		}
	}

	return r0, r1
}

// GetLoadBalancerTlsCertificates provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetLoadBalancerTlsCertificates(_a0 *lightsail.GetLoadBalancerTlsCertificatesInput) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetLoadBalancerTlsCertificatesOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetLoadBalancerTlsCertificatesInput) *lightsail.GetLoadBalancerTlsCertificatesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerTlsCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetLoadBalancerTlsCertificatesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerTlsCertificatesRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetLoadBalancerTlsCertificatesRequest(_a0 *lightsail.GetLoadBalancerTlsCertificatesInput) (*request.Request, *lightsail.GetLoadBalancerTlsCertificatesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetLoadBalancerTlsCertificatesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetLoadBalancerTlsCertificatesOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetLoadBalancerTlsCertificatesInput) *lightsail.GetLoadBalancerTlsCertificatesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetLoadBalancerTlsCertificatesOutput)
		}
	}

	return r0, r1
}

// GetLoadBalancerTlsCertificatesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetLoadBalancerTlsCertificatesWithContext(_a0 context.Context, _a1 *lightsail.GetLoadBalancerTlsCertificatesInput, _a2 ...request.Option) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetLoadBalancerTlsCertificatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerTlsCertificatesInput, ...request.Option) *lightsail.GetLoadBalancerTlsCertificatesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerTlsCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancerTlsCertificatesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetLoadBalancerWithContext(_a0 context.Context, _a1 *lightsail.GetLoadBalancerInput, _a2 ...request.Option) (*lightsail.GetLoadBalancerOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerInput, ...request.Option) *lightsail.GetLoadBalancerOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancerInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancers provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetLoadBalancers(_a0 *lightsail.GetLoadBalancersInput) (*lightsail.GetLoadBalancersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetLoadBalancersOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetLoadBalancersInput) *lightsail.GetLoadBalancersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetLoadBalancersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancersRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetLoadBalancersRequest(_a0 *lightsail.GetLoadBalancersInput) (*request.Request, *lightsail.GetLoadBalancersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetLoadBalancersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetLoadBalancersOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetLoadBalancersInput) *lightsail.GetLoadBalancersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetLoadBalancersOutput)
		}
	}

	return r0, r1
}

// GetLoadBalancersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetLoadBalancersWithContext(_a0 context.Context, _a1 *lightsail.GetLoadBalancersInput, _a2 ...request.Option) (*lightsail.GetLoadBalancersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetLoadBalancersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancersInput, ...request.Option) *lightsail.GetLoadBalancersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetOperation(_a0 *lightsail.GetOperationInput) (*lightsail.GetOperationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetOperationOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetOperationInput) *lightsail.GetOperationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetOperationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetOperationRequest(_a0 *lightsail.GetOperationInput) (*request.Request, *lightsail.GetOperationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetOperationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetOperationOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetOperationInput) *lightsail.GetOperationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetOperationOutput)
		}
	}

	return r0, r1
}

// GetOperationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetOperationWithContext(_a0 context.Context, _a1 *lightsail.GetOperationInput, _a2 ...request.Option) (*lightsail.GetOperationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetOperationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationInput, ...request.Option) *lightsail.GetOperationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetOperationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperations provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetOperations(_a0 *lightsail.GetOperationsInput) (*lightsail.GetOperationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetOperationsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetOperationsInput) *lightsail.GetOperationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetOperationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationsForResource provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetOperationsForResource(_a0 *lightsail.GetOperationsForResourceInput) (*lightsail.GetOperationsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetOperationsForResourceOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetOperationsForResourceInput) *lightsail.GetOperationsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetOperationsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationsForResourceRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetOperationsForResourceRequest(_a0 *lightsail.GetOperationsForResourceInput) (*request.Request, *lightsail.GetOperationsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetOperationsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetOperationsForResourceOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetOperationsForResourceInput) *lightsail.GetOperationsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetOperationsForResourceOutput)
		}
	}

	return r0, r1
}

// GetOperationsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetOperationsForResourceWithContext(_a0 context.Context, _a1 *lightsail.GetOperationsForResourceInput, _a2 ...request.Option) (*lightsail.GetOperationsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetOperationsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationsForResourceInput, ...request.Option) *lightsail.GetOperationsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetOperationsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetOperationsRequest(_a0 *lightsail.GetOperationsInput) (*request.Request, *lightsail.GetOperationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetOperationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetOperationsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetOperationsInput) *lightsail.GetOperationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetOperationsOutput)
		}
	}

	return r0, r1
}

// GetOperationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetOperationsWithContext(_a0 context.Context, _a1 *lightsail.GetOperationsInput, _a2 ...request.Option) (*lightsail.GetOperationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetOperationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationsInput, ...request.Option) *lightsail.GetOperationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetOperationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegions provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRegions(_a0 *lightsail.GetRegionsInput) (*lightsail.GetRegionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRegionsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRegionsInput) *lightsail.GetRegionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRegionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRegionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegionsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRegionsRequest(_a0 *lightsail.GetRegionsInput) (*request.Request, *lightsail.GetRegionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRegionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRegionsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRegionsInput) *lightsail.GetRegionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRegionsOutput)
		}
	}

	return r0, r1
}

// GetRegionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRegionsWithContext(_a0 context.Context, _a1 *lightsail.GetRegionsInput, _a2 ...request.Option) (*lightsail.GetRegionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRegionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRegionsInput, ...request.Option) *lightsail.GetRegionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRegionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRegionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabase provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabase(_a0 *lightsail.GetRelationalDatabaseInput) (*lightsail.GetRelationalDatabaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseInput) *lightsail.GetRelationalDatabaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseBlueprints provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseBlueprints(_a0 *lightsail.GetRelationalDatabaseBlueprintsInput) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseBlueprintsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseBlueprintsInput) *lightsail.GetRelationalDatabaseBlueprintsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseBlueprintsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseBlueprintsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseBlueprintsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseBlueprintsRequest(_a0 *lightsail.GetRelationalDatabaseBlueprintsInput) (*request.Request, *lightsail.GetRelationalDatabaseBlueprintsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseBlueprintsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseBlueprintsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseBlueprintsInput) *lightsail.GetRelationalDatabaseBlueprintsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseBlueprintsOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseBlueprintsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseBlueprintsWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseBlueprintsInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseBlueprintsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseBlueprintsInput, ...request.Option) *lightsail.GetRelationalDatabaseBlueprintsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseBlueprintsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseBlueprintsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseBundles provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseBundles(_a0 *lightsail.GetRelationalDatabaseBundlesInput) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseBundlesOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseBundlesInput) *lightsail.GetRelationalDatabaseBundlesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseBundlesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseBundlesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseBundlesRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseBundlesRequest(_a0 *lightsail.GetRelationalDatabaseBundlesInput) (*request.Request, *lightsail.GetRelationalDatabaseBundlesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseBundlesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseBundlesOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseBundlesInput) *lightsail.GetRelationalDatabaseBundlesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseBundlesOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseBundlesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseBundlesWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseBundlesInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseBundlesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseBundlesInput, ...request.Option) *lightsail.GetRelationalDatabaseBundlesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseBundlesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseBundlesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseEvents provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseEvents(_a0 *lightsail.GetRelationalDatabaseEventsInput) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseEventsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseEventsInput) *lightsail.GetRelationalDatabaseEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseEventsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseEventsRequest(_a0 *lightsail.GetRelationalDatabaseEventsInput) (*request.Request, *lightsail.GetRelationalDatabaseEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseEventsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseEventsInput) *lightsail.GetRelationalDatabaseEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseEventsOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseEventsWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseEventsInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseEventsInput, ...request.Option) *lightsail.GetRelationalDatabaseEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseLogEvents provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseLogEvents(_a0 *lightsail.GetRelationalDatabaseLogEventsInput) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseLogEventsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseLogEventsInput) *lightsail.GetRelationalDatabaseLogEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseLogEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseLogEventsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseLogEventsRequest(_a0 *lightsail.GetRelationalDatabaseLogEventsInput) (*request.Request, *lightsail.GetRelationalDatabaseLogEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseLogEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseLogEventsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseLogEventsInput) *lightsail.GetRelationalDatabaseLogEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseLogEventsOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseLogEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseLogEventsWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseLogEventsInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseLogEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseLogEventsInput, ...request.Option) *lightsail.GetRelationalDatabaseLogEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseLogEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseLogStreams provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseLogStreams(_a0 *lightsail.GetRelationalDatabaseLogStreamsInput) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseLogStreamsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseLogStreamsInput) *lightsail.GetRelationalDatabaseLogStreamsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseLogStreamsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseLogStreamsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseLogStreamsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseLogStreamsRequest(_a0 *lightsail.GetRelationalDatabaseLogStreamsInput) (*request.Request, *lightsail.GetRelationalDatabaseLogStreamsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseLogStreamsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseLogStreamsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseLogStreamsInput) *lightsail.GetRelationalDatabaseLogStreamsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseLogStreamsOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseLogStreamsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseLogStreamsWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseLogStreamsInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseLogStreamsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseLogStreamsInput, ...request.Option) *lightsail.GetRelationalDatabaseLogStreamsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseLogStreamsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseLogStreamsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseMasterUserPassword provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseMasterUserPassword(_a0 *lightsail.GetRelationalDatabaseMasterUserPasswordInput) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseMasterUserPasswordInput) *lightsail.GetRelationalDatabaseMasterUserPasswordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseMasterUserPasswordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseMasterUserPasswordRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseMasterUserPasswordRequest(_a0 *lightsail.GetRelationalDatabaseMasterUserPasswordInput) (*request.Request, *lightsail.GetRelationalDatabaseMasterUserPasswordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseMasterUserPasswordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseMasterUserPasswordInput) *lightsail.GetRelationalDatabaseMasterUserPasswordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseMasterUserPasswordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseMasterUserPasswordWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseMasterUserPasswordInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseMasterUserPasswordInput, ...request.Option) *lightsail.GetRelationalDatabaseMasterUserPasswordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseMasterUserPasswordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseMetricData provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseMetricData(_a0 *lightsail.GetRelationalDatabaseMetricDataInput) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseMetricDataOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseMetricDataInput) *lightsail.GetRelationalDatabaseMetricDataOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseMetricDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseMetricDataInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseMetricDataRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseMetricDataRequest(_a0 *lightsail.GetRelationalDatabaseMetricDataInput) (*request.Request, *lightsail.GetRelationalDatabaseMetricDataOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseMetricDataInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseMetricDataOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseMetricDataInput) *lightsail.GetRelationalDatabaseMetricDataOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseMetricDataOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseMetricDataWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseMetricDataWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseMetricDataInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseMetricDataOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseMetricDataInput, ...request.Option) *lightsail.GetRelationalDatabaseMetricDataOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseMetricDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseMetricDataInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseParameters provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseParameters(_a0 *lightsail.GetRelationalDatabaseParametersInput) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseParametersOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseParametersInput) *lightsail.GetRelationalDatabaseParametersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseParametersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseParametersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseParametersRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseParametersRequest(_a0 *lightsail.GetRelationalDatabaseParametersInput) (*request.Request, *lightsail.GetRelationalDatabaseParametersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseParametersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseParametersOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseParametersInput) *lightsail.GetRelationalDatabaseParametersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseParametersOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseParametersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseParametersWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseParametersInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseParametersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseParametersInput, ...request.Option) *lightsail.GetRelationalDatabaseParametersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseParametersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseParametersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseRequest(_a0 *lightsail.GetRelationalDatabaseInput) (*request.Request, *lightsail.GetRelationalDatabaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseInput) *lightsail.GetRelationalDatabaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseSnapshot provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseSnapshot(_a0 *lightsail.GetRelationalDatabaseSnapshotInput) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseSnapshotInput) *lightsail.GetRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseSnapshotInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseSnapshotRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseSnapshotRequest(_a0 *lightsail.GetRelationalDatabaseSnapshotInput) (*request.Request, *lightsail.GetRelationalDatabaseSnapshotOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseSnapshotInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseSnapshotInput) *lightsail.GetRelationalDatabaseSnapshotOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseSnapshotOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseSnapshotWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseSnapshotWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseSnapshotInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotInput, ...request.Option) *lightsail.GetRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseSnapshots provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseSnapshots(_a0 *lightsail.GetRelationalDatabaseSnapshotsInput) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabaseSnapshotsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseSnapshotsInput) *lightsail.GetRelationalDatabaseSnapshotsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseSnapshotsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseSnapshotsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabaseSnapshotsRequest(_a0 *lightsail.GetRelationalDatabaseSnapshotsInput) (*request.Request, *lightsail.GetRelationalDatabaseSnapshotsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabaseSnapshotsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabaseSnapshotsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabaseSnapshotsInput) *lightsail.GetRelationalDatabaseSnapshotsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabaseSnapshotsOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabaseSnapshotsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseSnapshotsWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseSnapshotsInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseSnapshotsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotsInput, ...request.Option) *lightsail.GetRelationalDatabaseSnapshotsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabaseWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabaseInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseInput, ...request.Option) *lightsail.GetRelationalDatabaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabases provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabases(_a0 *lightsail.GetRelationalDatabasesInput) (*lightsail.GetRelationalDatabasesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetRelationalDatabasesOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabasesInput) *lightsail.GetRelationalDatabasesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabasesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabasesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabasesRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetRelationalDatabasesRequest(_a0 *lightsail.GetRelationalDatabasesInput) (*request.Request, *lightsail.GetRelationalDatabasesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetRelationalDatabasesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetRelationalDatabasesOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetRelationalDatabasesInput) *lightsail.GetRelationalDatabasesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetRelationalDatabasesOutput)
		}
	}

	return r0, r1
}

// GetRelationalDatabasesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetRelationalDatabasesWithContext(_a0 context.Context, _a1 *lightsail.GetRelationalDatabasesInput, _a2 ...request.Option) (*lightsail.GetRelationalDatabasesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetRelationalDatabasesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabasesInput, ...request.Option) *lightsail.GetRelationalDatabasesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabasesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabasesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaticIp provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetStaticIp(_a0 *lightsail.GetStaticIpInput) (*lightsail.GetStaticIpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetStaticIpOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetStaticIpInput) *lightsail.GetStaticIpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetStaticIpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaticIpRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetStaticIpRequest(_a0 *lightsail.GetStaticIpInput) (*request.Request, *lightsail.GetStaticIpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetStaticIpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetStaticIpOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetStaticIpInput) *lightsail.GetStaticIpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetStaticIpOutput)
		}
	}

	return r0, r1
}

// GetStaticIpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetStaticIpWithContext(_a0 context.Context, _a1 *lightsail.GetStaticIpInput, _a2 ...request.Option) (*lightsail.GetStaticIpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetStaticIpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetStaticIpInput, ...request.Option) *lightsail.GetStaticIpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetStaticIpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaticIps provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetStaticIps(_a0 *lightsail.GetStaticIpsInput) (*lightsail.GetStaticIpsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.GetStaticIpsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.GetStaticIpsInput) *lightsail.GetStaticIpsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetStaticIpsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.GetStaticIpsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaticIpsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) GetStaticIpsRequest(_a0 *lightsail.GetStaticIpsInput) (*request.Request, *lightsail.GetStaticIpsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.GetStaticIpsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.GetStaticIpsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.GetStaticIpsInput) *lightsail.GetStaticIpsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.GetStaticIpsOutput)
		}
	}

	return r0, r1
}

// GetStaticIpsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) GetStaticIpsWithContext(_a0 context.Context, _a1 *lightsail.GetStaticIpsInput, _a2 ...request.Option) (*lightsail.GetStaticIpsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.GetStaticIpsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetStaticIpsInput, ...request.Option) *lightsail.GetStaticIpsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetStaticIpsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetStaticIpsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportKeyPair provides a mock function with given fields: _a0
func (_m *LightsailAPI) ImportKeyPair(_a0 *lightsail.ImportKeyPairInput) (*lightsail.ImportKeyPairOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.ImportKeyPairOutput
	if rf, ok := ret.Get(0).(func(*lightsail.ImportKeyPairInput) *lightsail.ImportKeyPairOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ImportKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.ImportKeyPairInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportKeyPairRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) ImportKeyPairRequest(_a0 *lightsail.ImportKeyPairInput) (*request.Request, *lightsail.ImportKeyPairOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.ImportKeyPairInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.ImportKeyPairOutput
	if rf, ok := ret.Get(1).(func(*lightsail.ImportKeyPairInput) *lightsail.ImportKeyPairOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.ImportKeyPairOutput)
		}
	}

	return r0, r1
}

// ImportKeyPairWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) ImportKeyPairWithContext(_a0 context.Context, _a1 *lightsail.ImportKeyPairInput, _a2 ...request.Option) (*lightsail.ImportKeyPairOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.ImportKeyPairOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ImportKeyPairInput, ...request.Option) *lightsail.ImportKeyPairOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ImportKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.ImportKeyPairInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVpcPeered provides a mock function with given fields: _a0
func (_m *LightsailAPI) IsVpcPeered(_a0 *lightsail.IsVpcPeeredInput) (*lightsail.IsVpcPeeredOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.IsVpcPeeredOutput
	if rf, ok := ret.Get(0).(func(*lightsail.IsVpcPeeredInput) *lightsail.IsVpcPeeredOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.IsVpcPeeredOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.IsVpcPeeredInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVpcPeeredRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) IsVpcPeeredRequest(_a0 *lightsail.IsVpcPeeredInput) (*request.Request, *lightsail.IsVpcPeeredOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.IsVpcPeeredInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.IsVpcPeeredOutput
	if rf, ok := ret.Get(1).(func(*lightsail.IsVpcPeeredInput) *lightsail.IsVpcPeeredOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.IsVpcPeeredOutput)
		}
	}

	return r0, r1
}

// IsVpcPeeredWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) IsVpcPeeredWithContext(_a0 context.Context, _a1 *lightsail.IsVpcPeeredInput, _a2 ...request.Option) (*lightsail.IsVpcPeeredOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.IsVpcPeeredOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.IsVpcPeeredInput, ...request.Option) *lightsail.IsVpcPeeredOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.IsVpcPeeredOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.IsVpcPeeredInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenInstancePublicPorts provides a mock function with given fields: _a0
func (_m *LightsailAPI) OpenInstancePublicPorts(_a0 *lightsail.OpenInstancePublicPortsInput) (*lightsail.OpenInstancePublicPortsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.OpenInstancePublicPortsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.OpenInstancePublicPortsInput) *lightsail.OpenInstancePublicPortsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.OpenInstancePublicPortsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.OpenInstancePublicPortsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenInstancePublicPortsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) OpenInstancePublicPortsRequest(_a0 *lightsail.OpenInstancePublicPortsInput) (*request.Request, *lightsail.OpenInstancePublicPortsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.OpenInstancePublicPortsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.OpenInstancePublicPortsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.OpenInstancePublicPortsInput) *lightsail.OpenInstancePublicPortsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.OpenInstancePublicPortsOutput)
		}
	}

	return r0, r1
}

// OpenInstancePublicPortsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) OpenInstancePublicPortsWithContext(_a0 context.Context, _a1 *lightsail.OpenInstancePublicPortsInput, _a2 ...request.Option) (*lightsail.OpenInstancePublicPortsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.OpenInstancePublicPortsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.OpenInstancePublicPortsInput, ...request.Option) *lightsail.OpenInstancePublicPortsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.OpenInstancePublicPortsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.OpenInstancePublicPortsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeerVpc provides a mock function with given fields: _a0
func (_m *LightsailAPI) PeerVpc(_a0 *lightsail.PeerVpcInput) (*lightsail.PeerVpcOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.PeerVpcOutput
	if rf, ok := ret.Get(0).(func(*lightsail.PeerVpcInput) *lightsail.PeerVpcOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.PeerVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.PeerVpcInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeerVpcRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) PeerVpcRequest(_a0 *lightsail.PeerVpcInput) (*request.Request, *lightsail.PeerVpcOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.PeerVpcInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.PeerVpcOutput
	if rf, ok := ret.Get(1).(func(*lightsail.PeerVpcInput) *lightsail.PeerVpcOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.PeerVpcOutput)
		}
	}

	return r0, r1
}

// PeerVpcWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) PeerVpcWithContext(_a0 context.Context, _a1 *lightsail.PeerVpcInput, _a2 ...request.Option) (*lightsail.PeerVpcOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.PeerVpcOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.PeerVpcInput, ...request.Option) *lightsail.PeerVpcOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.PeerVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.PeerVpcInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutInstancePublicPorts provides a mock function with given fields: _a0
func (_m *LightsailAPI) PutInstancePublicPorts(_a0 *lightsail.PutInstancePublicPortsInput) (*lightsail.PutInstancePublicPortsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.PutInstancePublicPortsOutput
	if rf, ok := ret.Get(0).(func(*lightsail.PutInstancePublicPortsInput) *lightsail.PutInstancePublicPortsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.PutInstancePublicPortsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.PutInstancePublicPortsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutInstancePublicPortsRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) PutInstancePublicPortsRequest(_a0 *lightsail.PutInstancePublicPortsInput) (*request.Request, *lightsail.PutInstancePublicPortsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.PutInstancePublicPortsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.PutInstancePublicPortsOutput
	if rf, ok := ret.Get(1).(func(*lightsail.PutInstancePublicPortsInput) *lightsail.PutInstancePublicPortsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.PutInstancePublicPortsOutput)
		}
	}

	return r0, r1
}

// PutInstancePublicPortsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) PutInstancePublicPortsWithContext(_a0 context.Context, _a1 *lightsail.PutInstancePublicPortsInput, _a2 ...request.Option) (*lightsail.PutInstancePublicPortsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.PutInstancePublicPortsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.PutInstancePublicPortsInput, ...request.Option) *lightsail.PutInstancePublicPortsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.PutInstancePublicPortsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.PutInstancePublicPortsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootInstance provides a mock function with given fields: _a0
func (_m *LightsailAPI) RebootInstance(_a0 *lightsail.RebootInstanceInput) (*lightsail.RebootInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.RebootInstanceOutput
	if rf, ok := ret.Get(0).(func(*lightsail.RebootInstanceInput) *lightsail.RebootInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.RebootInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.RebootInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootInstanceRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) RebootInstanceRequest(_a0 *lightsail.RebootInstanceInput) (*request.Request, *lightsail.RebootInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.RebootInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.RebootInstanceOutput
	if rf, ok := ret.Get(1).(func(*lightsail.RebootInstanceInput) *lightsail.RebootInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.RebootInstanceOutput)
		}
	}

	return r0, r1
}

// RebootInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) RebootInstanceWithContext(_a0 context.Context, _a1 *lightsail.RebootInstanceInput, _a2 ...request.Option) (*lightsail.RebootInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.RebootInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.RebootInstanceInput, ...request.Option) *lightsail.RebootInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.RebootInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.RebootInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootRelationalDatabase provides a mock function with given fields: _a0
func (_m *LightsailAPI) RebootRelationalDatabase(_a0 *lightsail.RebootRelationalDatabaseInput) (*lightsail.RebootRelationalDatabaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.RebootRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(*lightsail.RebootRelationalDatabaseInput) *lightsail.RebootRelationalDatabaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.RebootRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.RebootRelationalDatabaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootRelationalDatabaseRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) RebootRelationalDatabaseRequest(_a0 *lightsail.RebootRelationalDatabaseInput) (*request.Request, *lightsail.RebootRelationalDatabaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.RebootRelationalDatabaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.RebootRelationalDatabaseOutput
	if rf, ok := ret.Get(1).(func(*lightsail.RebootRelationalDatabaseInput) *lightsail.RebootRelationalDatabaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.RebootRelationalDatabaseOutput)
		}
	}

	return r0, r1
}

// RebootRelationalDatabaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) RebootRelationalDatabaseWithContext(_a0 context.Context, _a1 *lightsail.RebootRelationalDatabaseInput, _a2 ...request.Option) (*lightsail.RebootRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.RebootRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.RebootRelationalDatabaseInput, ...request.Option) *lightsail.RebootRelationalDatabaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.RebootRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.RebootRelationalDatabaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseStaticIp provides a mock function with given fields: _a0
func (_m *LightsailAPI) ReleaseStaticIp(_a0 *lightsail.ReleaseStaticIpInput) (*lightsail.ReleaseStaticIpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.ReleaseStaticIpOutput
	if rf, ok := ret.Get(0).(func(*lightsail.ReleaseStaticIpInput) *lightsail.ReleaseStaticIpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ReleaseStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.ReleaseStaticIpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseStaticIpRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) ReleaseStaticIpRequest(_a0 *lightsail.ReleaseStaticIpInput) (*request.Request, *lightsail.ReleaseStaticIpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.ReleaseStaticIpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.ReleaseStaticIpOutput
	if rf, ok := ret.Get(1).(func(*lightsail.ReleaseStaticIpInput) *lightsail.ReleaseStaticIpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.ReleaseStaticIpOutput)
		}
	}

	return r0, r1
}

// ReleaseStaticIpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) ReleaseStaticIpWithContext(_a0 context.Context, _a1 *lightsail.ReleaseStaticIpInput, _a2 ...request.Option) (*lightsail.ReleaseStaticIpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.ReleaseStaticIpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ReleaseStaticIpInput, ...request.Option) *lightsail.ReleaseStaticIpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ReleaseStaticIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.ReleaseStaticIpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstance provides a mock function with given fields: _a0
func (_m *LightsailAPI) StartInstance(_a0 *lightsail.StartInstanceInput) (*lightsail.StartInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.StartInstanceOutput
	if rf, ok := ret.Get(0).(func(*lightsail.StartInstanceInput) *lightsail.StartInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StartInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.StartInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstanceRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) StartInstanceRequest(_a0 *lightsail.StartInstanceInput) (*request.Request, *lightsail.StartInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.StartInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.StartInstanceOutput
	if rf, ok := ret.Get(1).(func(*lightsail.StartInstanceInput) *lightsail.StartInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.StartInstanceOutput)
		}
	}

	return r0, r1
}

// StartInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) StartInstanceWithContext(_a0 context.Context, _a1 *lightsail.StartInstanceInput, _a2 ...request.Option) (*lightsail.StartInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.StartInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StartInstanceInput, ...request.Option) *lightsail.StartInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StartInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StartInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRelationalDatabase provides a mock function with given fields: _a0
func (_m *LightsailAPI) StartRelationalDatabase(_a0 *lightsail.StartRelationalDatabaseInput) (*lightsail.StartRelationalDatabaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.StartRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(*lightsail.StartRelationalDatabaseInput) *lightsail.StartRelationalDatabaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StartRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.StartRelationalDatabaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRelationalDatabaseRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) StartRelationalDatabaseRequest(_a0 *lightsail.StartRelationalDatabaseInput) (*request.Request, *lightsail.StartRelationalDatabaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.StartRelationalDatabaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.StartRelationalDatabaseOutput
	if rf, ok := ret.Get(1).(func(*lightsail.StartRelationalDatabaseInput) *lightsail.StartRelationalDatabaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.StartRelationalDatabaseOutput)
		}
	}

	return r0, r1
}

// StartRelationalDatabaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) StartRelationalDatabaseWithContext(_a0 context.Context, _a1 *lightsail.StartRelationalDatabaseInput, _a2 ...request.Option) (*lightsail.StartRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.StartRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StartRelationalDatabaseInput, ...request.Option) *lightsail.StartRelationalDatabaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StartRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StartRelationalDatabaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInstance provides a mock function with given fields: _a0
func (_m *LightsailAPI) StopInstance(_a0 *lightsail.StopInstanceInput) (*lightsail.StopInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.StopInstanceOutput
	if rf, ok := ret.Get(0).(func(*lightsail.StopInstanceInput) *lightsail.StopInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StopInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.StopInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInstanceRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) StopInstanceRequest(_a0 *lightsail.StopInstanceInput) (*request.Request, *lightsail.StopInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.StopInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.StopInstanceOutput
	if rf, ok := ret.Get(1).(func(*lightsail.StopInstanceInput) *lightsail.StopInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.StopInstanceOutput)
		}
	}

	return r0, r1
}

// StopInstanceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) StopInstanceWithContext(_a0 context.Context, _a1 *lightsail.StopInstanceInput, _a2 ...request.Option) (*lightsail.StopInstanceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.StopInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StopInstanceInput, ...request.Option) *lightsail.StopInstanceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StopInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StopInstanceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopRelationalDatabase provides a mock function with given fields: _a0
func (_m *LightsailAPI) StopRelationalDatabase(_a0 *lightsail.StopRelationalDatabaseInput) (*lightsail.StopRelationalDatabaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.StopRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(*lightsail.StopRelationalDatabaseInput) *lightsail.StopRelationalDatabaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StopRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.StopRelationalDatabaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopRelationalDatabaseRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) StopRelationalDatabaseRequest(_a0 *lightsail.StopRelationalDatabaseInput) (*request.Request, *lightsail.StopRelationalDatabaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.StopRelationalDatabaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.StopRelationalDatabaseOutput
	if rf, ok := ret.Get(1).(func(*lightsail.StopRelationalDatabaseInput) *lightsail.StopRelationalDatabaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.StopRelationalDatabaseOutput)
		}
	}

	return r0, r1
}

// StopRelationalDatabaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) StopRelationalDatabaseWithContext(_a0 context.Context, _a1 *lightsail.StopRelationalDatabaseInput, _a2 ...request.Option) (*lightsail.StopRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.StopRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StopRelationalDatabaseInput, ...request.Option) *lightsail.StopRelationalDatabaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StopRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StopRelationalDatabaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *LightsailAPI) TagResource(_a0 *lightsail.TagResourceInput) (*lightsail.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*lightsail.TagResourceInput) *lightsail.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) TagResourceRequest(_a0 *lightsail.TagResourceInput) (*request.Request, *lightsail.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*lightsail.TagResourceInput) *lightsail.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) TagResourceWithContext(_a0 context.Context, _a1 *lightsail.TagResourceInput, _a2 ...request.Option) (*lightsail.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.TagResourceInput, ...request.Option) *lightsail.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpeerVpc provides a mock function with given fields: _a0
func (_m *LightsailAPI) UnpeerVpc(_a0 *lightsail.UnpeerVpcInput) (*lightsail.UnpeerVpcOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.UnpeerVpcOutput
	if rf, ok := ret.Get(0).(func(*lightsail.UnpeerVpcInput) *lightsail.UnpeerVpcOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UnpeerVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.UnpeerVpcInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpeerVpcRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) UnpeerVpcRequest(_a0 *lightsail.UnpeerVpcInput) (*request.Request, *lightsail.UnpeerVpcOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.UnpeerVpcInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.UnpeerVpcOutput
	if rf, ok := ret.Get(1).(func(*lightsail.UnpeerVpcInput) *lightsail.UnpeerVpcOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.UnpeerVpcOutput)
		}
	}

	return r0, r1
}

// UnpeerVpcWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) UnpeerVpcWithContext(_a0 context.Context, _a1 *lightsail.UnpeerVpcInput, _a2 ...request.Option) (*lightsail.UnpeerVpcOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.UnpeerVpcOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UnpeerVpcInput, ...request.Option) *lightsail.UnpeerVpcOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UnpeerVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UnpeerVpcInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *LightsailAPI) UntagResource(_a0 *lightsail.UntagResourceInput) (*lightsail.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*lightsail.UntagResourceInput) *lightsail.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) UntagResourceRequest(_a0 *lightsail.UntagResourceInput) (*request.Request, *lightsail.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*lightsail.UntagResourceInput) *lightsail.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) UntagResourceWithContext(_a0 context.Context, _a1 *lightsail.UntagResourceInput, _a2 ...request.Option) (*lightsail.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UntagResourceInput, ...request.Option) *lightsail.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainEntry provides a mock function with given fields: _a0
func (_m *LightsailAPI) UpdateDomainEntry(_a0 *lightsail.UpdateDomainEntryInput) (*lightsail.UpdateDomainEntryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.UpdateDomainEntryOutput
	if rf, ok := ret.Get(0).(func(*lightsail.UpdateDomainEntryInput) *lightsail.UpdateDomainEntryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateDomainEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.UpdateDomainEntryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainEntryRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) UpdateDomainEntryRequest(_a0 *lightsail.UpdateDomainEntryInput) (*request.Request, *lightsail.UpdateDomainEntryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.UpdateDomainEntryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.UpdateDomainEntryOutput
	if rf, ok := ret.Get(1).(func(*lightsail.UpdateDomainEntryInput) *lightsail.UpdateDomainEntryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.UpdateDomainEntryOutput)
		}
	}

	return r0, r1
}

// UpdateDomainEntryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) UpdateDomainEntryWithContext(_a0 context.Context, _a1 *lightsail.UpdateDomainEntryInput, _a2 ...request.Option) (*lightsail.UpdateDomainEntryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.UpdateDomainEntryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateDomainEntryInput, ...request.Option) *lightsail.UpdateDomainEntryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateDomainEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateDomainEntryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancerAttribute provides a mock function with given fields: _a0
func (_m *LightsailAPI) UpdateLoadBalancerAttribute(_a0 *lightsail.UpdateLoadBalancerAttributeInput) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.UpdateLoadBalancerAttributeOutput
	if rf, ok := ret.Get(0).(func(*lightsail.UpdateLoadBalancerAttributeInput) *lightsail.UpdateLoadBalancerAttributeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateLoadBalancerAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.UpdateLoadBalancerAttributeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancerAttributeRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) UpdateLoadBalancerAttributeRequest(_a0 *lightsail.UpdateLoadBalancerAttributeInput) (*request.Request, *lightsail.UpdateLoadBalancerAttributeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.UpdateLoadBalancerAttributeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.UpdateLoadBalancerAttributeOutput
	if rf, ok := ret.Get(1).(func(*lightsail.UpdateLoadBalancerAttributeInput) *lightsail.UpdateLoadBalancerAttributeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.UpdateLoadBalancerAttributeOutput)
		}
	}

	return r0, r1
}

// UpdateLoadBalancerAttributeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) UpdateLoadBalancerAttributeWithContext(_a0 context.Context, _a1 *lightsail.UpdateLoadBalancerAttributeInput, _a2 ...request.Option) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.UpdateLoadBalancerAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateLoadBalancerAttributeInput, ...request.Option) *lightsail.UpdateLoadBalancerAttributeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateLoadBalancerAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateLoadBalancerAttributeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelationalDatabase provides a mock function with given fields: _a0
func (_m *LightsailAPI) UpdateRelationalDatabase(_a0 *lightsail.UpdateRelationalDatabaseInput) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.UpdateRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(*lightsail.UpdateRelationalDatabaseInput) *lightsail.UpdateRelationalDatabaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.UpdateRelationalDatabaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelationalDatabaseParameters provides a mock function with given fields: _a0
func (_m *LightsailAPI) UpdateRelationalDatabaseParameters(_a0 *lightsail.UpdateRelationalDatabaseParametersInput) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *lightsail.UpdateRelationalDatabaseParametersOutput
	if rf, ok := ret.Get(0).(func(*lightsail.UpdateRelationalDatabaseParametersInput) *lightsail.UpdateRelationalDatabaseParametersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateRelationalDatabaseParametersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*lightsail.UpdateRelationalDatabaseParametersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelationalDatabaseParametersRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) UpdateRelationalDatabaseParametersRequest(_a0 *lightsail.UpdateRelationalDatabaseParametersInput) (*request.Request, *lightsail.UpdateRelationalDatabaseParametersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.UpdateRelationalDatabaseParametersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.UpdateRelationalDatabaseParametersOutput
	if rf, ok := ret.Get(1).(func(*lightsail.UpdateRelationalDatabaseParametersInput) *lightsail.UpdateRelationalDatabaseParametersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.UpdateRelationalDatabaseParametersOutput)
		}
	}

	return r0, r1
}

// UpdateRelationalDatabaseParametersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) UpdateRelationalDatabaseParametersWithContext(_a0 context.Context, _a1 *lightsail.UpdateRelationalDatabaseParametersInput, _a2 ...request.Option) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.UpdateRelationalDatabaseParametersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateRelationalDatabaseParametersInput, ...request.Option) *lightsail.UpdateRelationalDatabaseParametersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateRelationalDatabaseParametersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateRelationalDatabaseParametersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelationalDatabaseRequest provides a mock function with given fields: _a0
func (_m *LightsailAPI) UpdateRelationalDatabaseRequest(_a0 *lightsail.UpdateRelationalDatabaseInput) (*request.Request, *lightsail.UpdateRelationalDatabaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*lightsail.UpdateRelationalDatabaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *lightsail.UpdateRelationalDatabaseOutput
	if rf, ok := ret.Get(1).(func(*lightsail.UpdateRelationalDatabaseInput) *lightsail.UpdateRelationalDatabaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lightsail.UpdateRelationalDatabaseOutput)
		}
	}

	return r0, r1
}

// UpdateRelationalDatabaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *LightsailAPI) UpdateRelationalDatabaseWithContext(_a0 context.Context, _a1 *lightsail.UpdateRelationalDatabaseInput, _a2 ...request.Option) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lightsail.UpdateRelationalDatabaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateRelationalDatabaseInput, ...request.Option) *lightsail.UpdateRelationalDatabaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateRelationalDatabaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateRelationalDatabaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
